apply plugin: 'com.android.application'

def getVersionCode = { ->
    def git = 'git rev-list HEAD --count'

    def proc = git.execute()
    proc.waitFor()
    def desc = "${proc.in.text}".trim()

    if (desc.isEmpty()) {
        println "ERROR setting version code"
        return -1
    }
    return Integer.parseInt(desc)
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd_HH:mm:ss')
    return formattedDate
}

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 28
        versionCode = getVersionCode()
        versionName "0.28"
    }

    signingConfigs {
        if (System.getenv("TRAVIS")) {
            release {
                storeFile rootProject.file('android.jks')
                storePassword System.getenv("KEYSTORE_PASS")
                keyAlias System.getenv("ALIAS_NAME")
                keyPassword System.getenv("ALIAS_PASS")
            }
            debug {
                storeFile rootProject.file('android.jks')
                storePassword System.getenv("KEYSTORE_PASS")
                keyAlias System.getenv("ALIAS_NAME")
                keyPassword System.getenv("ALIAS_PASS")
            }
        } else {

            if (project.hasProperty('signKeyStorePassword') && new File(rootProject.ext.signKeyStore).exists()) {
                release {
                    keyAlias rootProject.ext.signKeyAlias
                    keyPassword rootProject.ext.signKeyPassword
                    storeFile file(rootProject.ext.signKeyStore)
                    storePassword rootProject.ext.signKeyStorePassword
                }
            }
            if (project.hasProperty('debugSignKeyStorePassword') && new File(rootProject.ext.debugSignKeyStore).exists()) {
                debug {
                    keyAlias rootProject.ext.debugSignKeyAlias
                    keyPassword rootProject.ext.debugSignKeyPassword
                    storeFile file(rootProject.ext.debugSignKeyStore)
                    storePassword rootProject.ext.debugSignKeyStorePassword
                }
            }

        }
    }

    buildTypes {
        release {
            apply plugin: 'idea'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            zipAlignEnabled true
            minifyEnabled false
            applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "${variant.applicationId}-${variant.name}.apk"
                }
            }
            signingConfig signingConfigs.release
        }
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-test" + getDate()
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "${variant.applicationId}-${variant.name}.apk"
                }
            }
            signingConfig signingConfigs.debug
        }
    }
}

dependencies {
    implementation 'com.android.support:appcompat-v7:28.+'
    implementation 'com.squareup.okhttp3:okhttp:3.11.0'
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}

task copyUserscripts(type: Copy)

copyUserscripts {
    description = 'Updating prebuilt plugins'
    from '../assets'
    into 'src/main/assets'
    include('*')
    include('**/*')
}

preBuild.dependsOn copyUserscripts
